apiVersion: v1
kind: List
items:
- apiVersion: v1
  kind: Secret
  metadata:
    name: sso-app-secret
  data:
    keystore.jks: "/u3+7QAAAAIAAAABAAAAAQAFamJvc3MAAAFShRzrOgAABQEwggT9MA4GCisGAQQBKgIRAQEFAASCBOmDfoVpQxGg4sIk+si6Fl16ZJDq+8FzpEtqsYLEzwmUHe/UMviPkxiH1FRwNzZ0axZ8uvI/zM73xGEYgAyFnVnEbxOf9llHJBbo1LNm7vLlhkVMRQLw6IM9GQVQGMRp40yWyd16+8NHWX1fC8TwduN0bkl8Sv50/meyEimyaM3WGiyfi1KqFNO2TaUAZNHMEWtsgb0BnoQRXQ9BX4HMSm71Kc4+LlvDfbGpRkSQ5hB4jwWf0vHTVualysOV7LdzLWXs/qvHKPpbZtBnXczDW20LJevoTYkjrS80ew/Jpj6z640OxGj1rpH+a4cRN1WkSfYo27zJf4p021fqFtNays3o4jegUK2oXTCZ4ZWIhk4sL/+dBlt3+pKaMst6h4tpdWPUqa7yZuOokl5Y9agA4Z8aBjj4w6VCReNYHVLayvk4V9E5w9cafVguzfKTlWFfUh40nQwkfIXXau+C4HICXCaECXLOju3/0oRqFaC2F6p1Tvkl+poaO+MnC4ShgOXVgOgQSO6FrYtSQzMbp0yWHBQsXLSks1Z48z9zlz4eSQMlV+f3EkIioD+Yb0uUI7fOrFfBUfSOKDJoDg51UVSRBY7Jko4BqCHeFnAnCCwxA0wQbd1HGAUlXJk2xL4M11vGQyOijmWKR0fp5g/ngKyJoDUhwwXYq2jONlbVxWghqoAnvkwzEkkCC1jWErM2lv66EVUfFYRZ/FuVIC2tUOTKs+ZcY7P6ya9F1OOpiQX80JtXL71OR1xqMqyelnoEeH1SymSlIPV8HpzVXzQtqVTgqMiqxDmv+JZMl5jjuFW6oQq26UN/H1oYIZyQDHSL4FunAPh983+wLzjj/Q2dVTZT12md/JTTdozTb0vozbTWGOdTTO+SV7DXyPUQg6xz0stL/6HsLhpVzZBJnufIr7MPl7O9AxI0KdaD4JeFuk63tqMfMSdt5s8D7qcSKuMFzh648NNwoZOFwyn9rIEMw99D9fCybqoLNAuefFialQfimF1jv9wZWriRt7YstUvYC2aZZmGmeUBklrEx77gWaghT+HJv7Dfr4uFw4a6lbpb21aknPx0JmfxmdkyH5sRG2MUojV7LYs3WEhC3UvHWR6MczFWcG7JpC2RYx36R5IIYOD6164erIOUCIETabRjyq2xzXgnkcV8mUI6IKMM62gBi+6HxG/Ls2blKx2hZJeOTiHOVzjV3gZ6VB7Gu9BfAW5bPZMOq7/Z+hQ4xdhf6JPOoRKcieb6CU+LjthZycaEDjvoekessmkgFjX/tMtM9ARjxwwlLtUO0wQRrVETVmxCO0cPHa+UIPgFcAGa9gOlIjYEZmwBRW8tCjCgHKXJXVymQHuBAu6nSmYu/26lbaz7S0a+4yD027KvD7y88ZGH22Uf/bjsPvnRvttIl+p0OHX7qzdaFd2Qfz3P7/vyNoK0vw/kZLXuVbEPkKCYVqFwm1MO5GjrDikOMSb7hm+9PLg4k3Ib80OVv9gJ47hn5QotivHnat02Ga89jsVCN6oxplL5bymQCzsV1wtFEkUzhnyRunvfZ1Z/Z22DouR27fltvbzxC4VMQ+cDZpxVxk4WowgRNP4oLSb08LQoMvIKx54uTu/IBmZxJinvOX11ODtKMgEdHFPEfNgNFSgvIdqo6H0h7w4KxelJT8IxPt3ZvoILX9+0MLrxCE6HSg0oAAAABAAVYLjUwOQAAA0MwggM/MIICJ6ADAgECAgR29XPcMA0GCSqGSIb3DQEBCwUAMFAxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTELMAkGA1UEBxMCU0QxCzAJBgNVBAoTAlJIMQswCQYDVQQLEwJDRTENMAsGA1UEAxMEQmlsbDAeFw0xNjAxMjcyMjAzMjdaFw0xNjA0MjYyMjAzMjdaMFAxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTELMAkGA1UEBxMCU0QxCzAJBgNVBAoTAlJIMQswCQYDVQQLEwJDRTENMAsGA1UEAxMEQmlsbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKuWH7G9DWZrnnW64VVrck1BjBGEWYMVDCVI8ADklap1UT1DHfdZ1CywMDtxOShp+8ZBO6gVfOoBmJ8SAd6roHFI9/N4X4Sl3VLfL/i6HEsxDIhI06bi8VbqzrrM3M6zlhG9B/JaVHkurWwsc2sxkgiGEO1bfYk+26LEM5LD3hmnFtQ7B8Cw5/Qpi0IPUe3gqQvSeAoeXhHtFsD0FgrnF1OwBh5pyG+T9SPJov/iyV9OQMg6QrtOGL/BtAAiqkFGdXOuNWSoOZTBFtq3L8HSwQl0n9Z2QC7X2pgclUbMJQsgc0gwAjCzXscxyDdW0qHLBsvvtghEGRN0BEYO3X4/Au0CAwEAAaMhMB8wHQYDVR0OBBYEFGt3cWZ4Bu0zb9CUY5lJq97rD3cWMA0GCSqGSIb3DQEBCwUAA4IBAQAKF2D2ajXngELf5iNNBOjdexYo7mWAsrD5Eep57oBil440Uoz5pB44hljQ3ItOZz7pyOoF3R+Gx4k5zLykqyU+WYF8PaMHsV6j+/+++dwyVMiIJxdkxPgcGrh/+LEFuSa6aTlyg8A2sHJiQcluJ4Ktn6/X5Yz8JD/h3TrEv8qKUgE719EE+Drqk3hxQxLzYx3v63uvQAWJ7zmk6dFLdLDHYCnrwe0E50Jzd0ZKd/M4ZStFPWqLDajhm9mOaBgU3HmpNoJYMXq+forhGPIF1QttZEoLZhaTzxDh3xvFPBb06rT2pja5mEDQtJR9eJ47H72W5UI8INqohqRK662r/F/bObGzQmqxXoafHVUvT0IS40Rn8GA="
    jgroups.jceks: zs7OzgAAAAIAAAABAAAAAwAKc2VjcmV0LWtleQAAAVDQhuHmrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAAPMA0ECHcwLGK6EDyLAgEUdXEAfgAFAAAAmCu9wRKf1aYYUOEWe406ncPtIdm3147G7MJyWUu2kJVY15a2QxeZi9w5J3AF6T64CvylUuQjpcC4DWXwVn9BefntkBR8CzTiH7VxEqVOQ/OkFS29Inoq8t7/NBaTgTdmMkb4ETV1gIsy/+W6kk7QTqxItCkdKKGFE90Be/7yL3tG16TCy/ABKl7CO6PHa44CqK2PUE1oaJ+WdAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVMN658veJP01V2j9y8bQCYIzViutw==
- apiVersion: v1
  kind: Secret
  metadata:
    name: sso-demo-secret
  data:
    sso-demo.json: WwogIHsKICAgICJpZCI6ICJkZW1vIiwKICAgICJyZWFsbSI6ICJkZW1vIiwKICAgICJkaXNwbGF5TmFtZSI6ICJyaC1zc28iLAogICAgImRpc3BsYXlOYW1lSHRtbCI6ICI8c3Ryb25nPlJlZCBIYXQ8L3N0cm9uZz48c3VwPsKuPC9zdXA+IFNpbmdsZSBTaWduIE9uIiwKICAgICJub3RCZWZvcmUiOiAwLAogICAgInJldm9rZVJlZnJlc2hUb2tlbiI6IGZhbHNlLAogICAgImFjY2Vzc1Rva2VuTGlmZXNwYW4iOiA2MDAsCiAgICAiYWNjZXNzVG9rZW5MaWZlc3BhbkZvckltcGxpY2l0RmxvdyI6IDkwMCwKICAgICJzc29TZXNzaW9uSWRsZVRpbWVvdXQiOiAxODAwLAogICAgInNzb1Nlc3Npb25NYXhMaWZlc3BhbiI6IDM2MDAwLAogICAgIm9mZmxpbmVTZXNzaW9uSWRsZVRpbWVvdXQiOiAyNTkyMDAwLAogICAgImFjY2Vzc0NvZGVMaWZlc3BhbiI6IDYwLAogICAgImFjY2Vzc0NvZGVMaWZlc3BhblVzZXJBY3Rpb24iOiAzMDAsCiAgICAiYWNjZXNzQ29kZUxpZmVzcGFuTG9naW4iOiAxODAwLAogICAgImVuYWJsZWQiOiB0cnVlLAogICAgInNzbFJlcXVpcmVkIjogImV4dGVybmFsIiwKICAgICJyZWdpc3RyYXRpb25BbGxvd2VkIjogZmFsc2UsCiAgICAicmVnaXN0cmF0aW9uRW1haWxBc1VzZXJuYW1lIjogZmFsc2UsCiAgICAicmVtZW1iZXJNZSI6IGZhbHNlLAogICAgInZlcmlmeUVtYWlsIjogZmFsc2UsCiAgICAicmVzZXRQYXNzd29yZEFsbG93ZWQiOiBmYWxzZSwKICAgICJlZGl0VXNlcm5hbWVBbGxvd2VkIjogZmFsc2UsCiAgICAiYnJ1dGVGb3JjZVByb3RlY3RlZCI6IGZhbHNlLAogICAgIm1heEZhaWx1cmVXYWl0U2Vjb25kcyI6IDkwMCwKICAgICJtaW5pbXVtUXVpY2tMb2dpbldhaXRTZWNvbmRzIjogNjAsCiAgICAid2FpdEluY3JlbWVudFNlY29uZHMiOiA2MCwKICAgICJxdWlja0xvZ2luQ2hlY2tNaWxsaVNlY29uZHMiOiAxMDAwLAogICAgIm1heERlbHRhVGltZVNlY29uZHMiOiA0MzIwMCwKICAgICJmYWlsdXJlRmFjdG9yIjogMzAsCiAgICAicHJpdmF0ZUtleSI6ICJNSUlFb3dJQkFBS0NBUUVBb0VUblBtTjU1eEJKalJ6Ti9jczMwT3pKOW9sa3RlTFZOUmp6ZFR4Rk95UnRTMm92RGZ6ZGhoTzlYelVjVE1iSXNDT0FadFN0OEsrNnl2Qlh5cE9TWXZJNzVFVWR5cG1rY0sxS29wdHFZNUtFQlExS3doV3VQN0lXUTBmc2hVd0Q2akkxUVdEZkd4Zk0vaDM0RnZFbi8wdEo3MXhOMlA4VEkyWWFud3VEWmdvc2RvYngvUEF2bEdSRUJHdWs0QmdtZXhUT2tBZG5GeElVUWNDa2lFWjJDNDF1Q3J4aVM0Q0VlNU9YOTFhSzlIS1pWNFpKWDZ2bnFNSG1kRG5zTWRPK1VGdHhPQllaaW8rYTFqUDRXM2Q3SjVmR2VpT2FYalFDT3BpdktuUDJ5VTJEUGRXbURNeVZiNjdsOERSQStqaDBPSkZLWjVIMmZOZ0UzSUk1OXZkc1J3SURBUUFCQW9JQkFRQ1RIMDFyM3lOcmNtOGlZOXZRNjdrY1NCSUtDQXYwVC90S2w5SDl2OHNKeEtHMEJoQ1Y5WmRoV2tPUDM1QlFCbmI2QWt6L21LTG4vRmtyckQvYkRXYm0vOWpzN21tdnJ5VGQ3cVpCNlF0YnhvYjhvRHdOT0p2Uml1aVc4TEoxbHRkTktMUHNoVUdwZkVySXg3Z1RUMk5aSHNNTFFKK1I0RzJ3SkMyeDdINjlyb3F3S3NRalVGZldiOERmcDR4USs0M2Y5NklZS3dvUDZaN0UwVk9mN2FJT1M5eW5ZMEFZY2JMR1VkelU4TDdOOG5qSW96L0pHM1pBRGg1RTlmckJnam4rS3BhOUJxVXRJQU01NDRSdlk3R1BxbFNXa2Q1SzVxOXBDNVdsRVlTZ0QweTh1NWpXVjMxejZ3TzVrY0p5SlN2aU41TDJUOHUyVndCRnJMdTBOVDM1QW9HQkFOWml1allZK0V2WnBBOTVzRkxXdE5RZWJlcUhpNmlLL0xEWVZCQXczY2dsUjNQcGp0cDRMQndMa0NValhFdkJsSmtDRFZEdmlKQUdiMVBTUUlBblB3bU9zMmNQUGh0VkI1VVBVUS91SlgrOGhFWjZXbEpkQUFDZnl1QnZOVlQ2eGxDODhjWmw4Q0FUT0N0N3JJWm40U29sa1J0dzBaQWp4emZtVDlkRnRCbHpBb0dCQUw5aEEzZkk3OXJpUHRrL2dvakhOeFNjbm5DSGpxcWJlTTBCQWltT0RiKzd5ZzlvdHBjT2JGallvNGpidVZBWDVYRE10RmVXajlocXZrRTFUR2VqcXZOTVpvc1dNaEpOcVh2K0RGa3hCdTY0RlhnV3ppSUJuYkpoc3RKenRYL2RTMDBmeWNjdEJnUWRVWE1hM3J0R0w3bFRkejJEVjN5T003OFM3cmVKdjd6ZEFvR0FKOUUyWEkzT3IrZkFQTStSSEJHY2pEa0ttU0NMbzhZTW9Kdk5JU1N5VEZZQUsxc1ptU0h3cjFUR2ROOVlhUW1QRzh2eHhUSjMzcWdUVFRJam9LbXBYNUVOYVBxL3dqdk1xTGFyaTVYamlSSHVUMWl5SmRINENpV2pmSU9yR0JscmM5dGozRUZhazlwOStEV0VHWUo1bzJaT3lSWHZGaUpQQWViWXRWYlEyRmtDZ1lCM0xrWkhtWVh0ak1uUTV5RTJac0doZjJ1WDdvTmxNYzhIOCtIUjJSb3MxaGllZ2ZwN2xjclpoWWhLR1hPTk1tUjdXNi9QZi83eXFuN3pBdXNpKzZUaFFTbjI0Z3FxcFZ5dnorVUd3bVpyMFkzbExHYVFmT3NsQkh5bFhOT2gza0VmdFhVbUtaNitmemVTOUIvVEJvRi82eit0dWhhSWhkSXA0dk53cjBNTnJRS0JnQllWZTBFUnE1Z1RHVFY5OXdJaytqNHk5YVZ3Yi9uSnVNb3oyT0ZkZVJxSy81UEZ6TWlkZjgyU0E1NkNPQTNYTmVBSVBicTRCbS8wYWhZdm1Ob2xWUUhuZXdYTEs2blV4SnNFcFBIdG16bDRaSzN3TTNrYnp3Y0MzUVVaaGk3TnBLUnptS3FuclcrSGhYTGFjUER4QU5MQlpQazh5WWhIQ1VyR3E2dlR1Q2ZuIiwKICAgICJwdWJsaWNLZXkiOiAiTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFvRVRuUG1ONTV4QkpqUnpOL2NzMzBPeko5b2xrdGVMVk5SanpkVHhGT3lSdFMyb3ZEZnpkaGhPOVh6VWNUTWJJc0NPQVp0U3Q4Sys2eXZCWHlwT1NZdkk3NUVVZHlwbWtjSzFLb3B0cVk1S0VCUTFLd2hXdVA3SVdRMGZzaFV3RDZqSTFRV0RmR3hmTS9oMzRGdkVuLzB0SjcxeE4yUDhUSTJZYW53dURaZ29zZG9ieC9QQXZsR1JFQkd1azRCZ21leFRPa0FkbkZ4SVVRY0NraUVaMkM0MXVDcnhpUzRDRWU1T1g5MWFLOUhLWlY0WkpYNnZucU1IbWREbnNNZE8rVUZ0eE9CWVppbythMWpQNFczZDdKNWZHZWlPYVhqUUNPcGl2S25QMnlVMkRQZFdtRE15VmI2N2w4RFJBK2poME9KRktaNUgyZk5nRTNJSTU5dmRzUndJREFRQUIiLAogICAgImNlcnRpZmljYXRlIjogIk1JSUNtekNDQVlNQ0JnRmF2LzlOYkRBTkJna3Foa2lHOXcwQkFRc0ZBREFSTVE4d0RRWURWUVFEREFadFlYTjBaWEl3SGhjTk1UY3dNekV5TURBME9USTBXaGNOTWpjd016RXlNREExTVRBMFdqQVJNUTh3RFFZRFZRUUREQVp0WVhOMFpYSXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZ1JPYytZM25uRUVtTkhNMzl5emZRN01uMmlXUzE0dFUxR1BOMVBFVTdKRzFMYWk4Ti9OMkdFNzFmTlJ4TXhzaXdJNEJtMUszd3I3cks4RmZLazVKaThqdmtSUjNLbWFSd3JVcWltMnBqa29RRkRVckNGYTQvc2haRFIreUZUQVBxTWpWQllOOGJGOHorSGZnVzhTZi9TMG52WEUzWS94TWpaaHFmQzRObUNpeDJodkg4OEMrVVpFUUVhNlRnR0NaN0ZNNlFCMmNYRWhSQndLU0lSbllMalc0S3ZHSkxnSVI3azVmM1ZvcjBjcGxYaGtsZnErZW93ZVowT2V3eDA3NVFXM0U0RmhtS2o1cldNL2hiZDNzbmw4WjZJNXBlTkFJNm1LOHFjL2JKVFlNOTFhWU16SlZ2cnVYd05FRDZPSFE0a1VwbmtmWjgyQVRjZ2puMjkyeEhBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBK1J1RW9aaU9RR2ZZZlhWVDNkRTZUaDNJTm5SM25TdE51UDVBUXYvY055REJ3QzV5TFVkQkFCRE9VYVBTYjZPV0lZOHB4R3M0NTdGY3QwZ3pRc1B1RTk5WmszR0RmUk5PcWtNQTk1Mk80R2grSGMyN05iellmTG1oUHlUU1RlMW9LQnhvWW1zbUJ3NTdWaXgrck9LYmhMQUh5Vmg1UVhsNGhoYnRydUxkcVA2RU13TDExZVd5a0JDSjFiN2dDdVlqQ0dLcFliTEtwU3RnMnhYbzlyUFRkM05tbVBZbnBDWU5yRXdsNzZQKythNHc5SWNzVW4yRW1CdTBQM25qWWd0eFd1Y1RxOUxENUkwaDR1b2tuWkVpckVSa1gxMVNqUW5UemFucHE4bktwaFJWMFJkR25XV1NFTjQzOEhsMVhSNHpyU1JsQ2xGbE4zTWNGNEM0VTRNVkU9IiwKICAgICJjb2RlU2VjcmV0IjogIjQ5YmQwMDIxLWE2MWYtNDQ1Mi05ZWUwLTEwMTAwNjIxZDkxNyIsCiAgICAicm9sZXMiOiB7CiAgICAgICJyZWFsbSI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiYzE2NmYzNzYtZDQ1MC00OTgzLWE0ZDgtNTNhYjI5N2MzZmE1IiwKICAgICAgICAgICJuYW1lIjogImFkbWluIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfYWRtaW59IiwKICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICJjb21wb3NpdGUiOiB0cnVlLAogICAgICAgICAgImNvbXBvc2l0ZXMiOiB7CiAgICAgICAgICAgICJyZWFsbSI6IFsKICAgICAgICAgICAgICAiY3JlYXRlLXJlYWxtIgogICAgICAgICAgICBdLAogICAgICAgICAgICAiY2xpZW50IjogewogICAgICAgICAgICAgICJkZW1vLXJlYWxtIjogWwogICAgICAgICAgICAgICAgIm1hbmFnZS1ldmVudHMiLAogICAgICAgICAgICAgICAgIm1hbmFnZS1jbGllbnRzIiwKICAgICAgICAgICAgICAgICJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsCiAgICAgICAgICAgICAgICAiY3JlYXRlLWNsaWVudCIsCiAgICAgICAgICAgICAgICAidmlldy1ldmVudHMiLAogICAgICAgICAgICAgICAgInZpZXctY2xpZW50cyIsCiAgICAgICAgICAgICAgICAibWFuYWdlLXJlYWxtIiwKICAgICAgICAgICAgICAgICJ2aWV3LXVzZXJzIiwKICAgICAgICAgICAgICAgICJtYW5hZ2UtdXNlcnMiLAogICAgICAgICAgICAgICAgImltcGVyc29uYXRpb24iLAogICAgICAgICAgICAgICAgInZpZXctcmVhbG0iLAogICAgICAgICAgICAgICAgIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiOWVmOGM5NjItYjQxYS00YzZjLThlODYtYThjMjJiZGU3ODA4IiwKICAgICAgICAgICJuYW1lIjogImNyZWF0ZS1yZWFsbSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX2NyZWF0ZS1yZWFsbX0iLAogICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiMGE3NTg1MWUtNjNmMC00NWQyLThlNWUtZDQzMjE4YWE5YTA4IiwKICAgICAgICAgICJuYW1lIjogImV4YW1wbGUtYWRtaW4iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkFuIGV4YW1wbGUgYWRtaW5pc3RyYXRvciByb2xlIiwKICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImlkIjogImZjNGFlZDUxLTA3NWYtNDM4Yi05N2FiLTM0ZDQ1NjZlNjI0YiIsCiAgICAgICAgICAibmFtZSI6ICJvZmZsaW5lX2FjY2VzcyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX29mZmxpbmUtYWNjZXNzfSIsCiAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgIH0KICAgICAgXSwKICAgICAgImNsaWVudCI6IHsKICAgICAgICAiZGVtb2FwcCI6IFtdLAogICAgICAgICJzZWN1cml0eS1hZG1pbi1jb25zb2xlIjogW10sCiAgICAgICAgInNlY3VyZWQtZXhhbXBsZS1lbmRwb2ludCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjFmNGJlYTE1LWEyYjMtNGEzNC1hZmM5LWMwZTI2NGJlODEzNiIsCiAgICAgICAgICAgICJuYW1lIjogImV4YW1wbGUtYWRtaW4iLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQW4gZXhhbXBsZSBhZG1pbmlzdHJhdG9yIGNsaWVudCIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiYWRtaW4tY2xpIjogW10sCiAgICAgICAgImJyb2tlciI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjQ1NGNkNTg0LWIxZGUtNGFkMS1hN2RmLWU0ZDJhZDlmMTJiOCIsCiAgICAgICAgICAgICJuYW1lIjogInJlYWQtdG9rZW4iLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX3JlYWQtdG9rZW59IiwKICAgICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29tcG9zaXRlIjogZmFsc2UKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJkZW1vLXJlYWxtIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiODFlM2RhNmEtZGY2Yy00NjYzLTk0YTMtNWFiYWFjMTNhNjY4IiwKICAgICAgICAgICAgIm5hbWUiOiAibWFuYWdlLWV2ZW50cyIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfbWFuYWdlLWV2ZW50c30iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjU2NTg1M2RhLWFmMWItNDU1NS1iZTc3LTJhNDdjYmRjZTIyYSIsCiAgICAgICAgICAgICJuYW1lIjogIm1hbmFnZS1yZWFsbSIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfbWFuYWdlLXJlYWxtfSIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMjUzZmI5ODgtNDM4NC00OTgyLWI2MDktNjM2OWIxMDBjNGMyIiwKICAgICAgICAgICAgIm5hbWUiOiAidmlldy11c2VycyIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfdmlldy11c2Vyc30iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjIwM2YzNTYwLTIwYjMtNDVmYi1hMDE0LTZiMWE0ODg0ODM4NCIsCiAgICAgICAgICAgICJuYW1lIjogIm1hbmFnZS11c2VycyIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfbWFuYWdlLXVzZXJzfSIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiNDM4M2RjYzItMGQzNS00ZGJmLTg0NDctYTg1ZDg0MWYwOWQ0IiwKICAgICAgICAgICAgIm5hbWUiOiAibWFuYWdlLWNsaWVudHMiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX21hbmFnZS1jbGllbnRzfSIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiOTA3MWY4NmYtZTdkNS00MDNkLTk3NjktOGNmNTYzNmI3NGZjIiwKICAgICAgICAgICAgIm5hbWUiOiAidmlldy1pZGVudGl0eS1wcm92aWRlcnMiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX3ZpZXctaWRlbnRpdHktcHJvdmlkZXJzfSIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiN2ZhNWY2M2ItYmEzOS00OTZlLTk5ZWUtY2FlMzM0MjNhZjliIiwKICAgICAgICAgICAgIm5hbWUiOiAiY3JlYXRlLWNsaWVudCIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfY3JlYXRlLWNsaWVudH0iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImYwODYxODgyLWUzMzctNDJiYi05ZDI3LWNkNTJmZmFjYzNmNyIsCiAgICAgICAgICAgICJuYW1lIjogInZpZXctZXZlbnRzIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiR7cm9sZV92aWV3LWV2ZW50c30iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImFlMjE5ZTcyLTY1YTktNGM0NS1hZTU2LTQzZGQ2ZjZiYjIzMSIsCiAgICAgICAgICAgICJuYW1lIjogImltcGVyc29uYXRpb24iLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX2ltcGVyc29uYXRpb259IiwKICAgICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29tcG9zaXRlIjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJiNDA1NmM1ZC0xYWMxLTQzYmItOTEzYi1mN2JlYjIxMzY2NTIiLAogICAgICAgICAgICAibmFtZSI6ICJ2aWV3LWNsaWVudHMiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX3ZpZXctY2xpZW50c30iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjU2NDgwZTAyLTdmMTQtNGE4ZS04MjVkLTVkM2U5OTQ4ZGExNCIsCiAgICAgICAgICAgICJuYW1lIjogInZpZXctcmVhbG0iLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX3ZpZXctcmVhbG19IiwKICAgICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29tcG9zaXRlIjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJkMzQ4ZTliZi1lMmI0LTRiOWMtOGNiYS1jZWE5OWM2YmIzMmUiLAogICAgICAgICAgICAibmFtZSI6ICJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiR7cm9sZV9tYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzfSIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiYWNjb3VudCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjBjYjFhYjQ2LTBjYmEtNGY0Zi05MDc1LWEyYmQ0Y2VhMzQ5OSIsCiAgICAgICAgICAgICJuYW1lIjogIm1hbmFnZS1hY2NvdW50IiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiR7cm9sZV9tYW5hZ2UtYWNjb3VudH0iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImZkODk2YmI0LTI4MTItNGMzMi1hM2MzLTZlNDM4NDM2MzNmOSIsCiAgICAgICAgICAgICJuYW1lIjogInZpZXctcHJvZmlsZSIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfdmlldy1wcm9maWxlfSIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgImdyb3VwcyI6IFtdLAogICAgImRlZmF1bHRSb2xlcyI6IFsKICAgICAgIm9mZmxpbmVfYWNjZXNzIgogICAgXSwKICAgICJyZXF1aXJlZENyZWRlbnRpYWxzIjogWwogICAgICAicGFzc3dvcmQiCiAgICBdLAogICAgInBhc3N3b3JkUG9saWN5IjogImhhc2hJdGVyYXRpb25zKDIwMDAwKSIsCiAgICAib3RwUG9saWN5VHlwZSI6ICJ0b3RwIiwKICAgICJvdHBQb2xpY3lBbGdvcml0aG0iOiAiSG1hY1NIQTEiLAogICAgIm90cFBvbGljeUluaXRpYWxDb3VudGVyIjogMCwKICAgICJvdHBQb2xpY3lEaWdpdHMiOiA2LAogICAgIm90cFBvbGljeUxvb2tBaGVhZFdpbmRvdyI6IDEsCiAgICAib3RwUG9saWN5UGVyaW9kIjogMzAsCiAgICAidXNlcnMiOiBbCiAgICAgIHsKICAgICAgICAiaWQiOiAiMjYyNjc3ZmEtMTAyYi00ZDYwLTlhNjEtYjFjYTJhZmQ2NjNhIiwKICAgICAgICAiY3JlYXRlZFRpbWVzdGFtcCI6IDE0ODkyNzk4ODA2MzAsCiAgICAgICAgInVzZXJuYW1lIjogImFkbWluIiwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgInRvdHAiOiBmYWxzZSwKICAgICAgICAiZW1haWxWZXJpZmllZCI6IGZhbHNlLAogICAgICAgICJjcmVkZW50aWFscyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAicGFzc3dvcmQiLAogICAgICAgICAgICAiaGFzaGVkU2FsdGVkVmFsdWUiOiAibDFiOVg1R1haSjBIdURDME1NdHBtN0dSb0lGeUhBNjFqUk9ndjQ5THNtcytlNjVZb3Q3bVFzZ01pNitJSzFNRVltSUszRVMwWmRIUE5uYzBROUNpZUE9PSIsCiAgICAgICAgICAgICJzYWx0IjogIkM2bC9SbXNPekIwbHoydHEyWWZheHc9PSIsCiAgICAgICAgICAgICJoYXNoSXRlcmF0aW9ucyI6IDIwMDAwLAogICAgICAgICAgICAiY291bnRlciI6IDAsCiAgICAgICAgICAgICJhbGdvcml0aG0iOiAicGJrZGYyIiwKICAgICAgICAgICAgImRpZ2l0cyI6IDAsCiAgICAgICAgICAgICJjcmVhdGVkRGF0ZSI6IDE0ODkyNzk4ODAwMDAKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZXF1aXJlZEFjdGlvbnMiOiBbXSwKICAgICAgICAicmVhbG1Sb2xlcyI6IFsKICAgICAgICAgICJhZG1pbiIsCiAgICAgICAgICAib2ZmbGluZV9hY2Nlc3MiCiAgICAgICAgXSwKICAgICAgICAiY2xpZW50Um9sZXMiOiB7CiAgICAgICAgICAiYWNjb3VudCI6IFsKICAgICAgICAgICAgIm1hbmFnZS1hY2NvdW50IiwKICAgICAgICAgICAgInZpZXctcHJvZmlsZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJncm91cHMiOiBbXQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogImMwMTc1Y2NiLTA4OTItNGIzMS04MjlmLWRkYTg3MzgxNWZlOCIsCiAgICAgICAgImNyZWF0ZWRUaW1lc3RhbXAiOiAxNDg5MjgwNzczOTcwLAogICAgICAgICJ1c2VybmFtZSI6ICJhbGljZSIsCiAgICAgICAgImVuYWJsZWQiOiB0cnVlLAogICAgICAgICJ0b3RwIjogZmFsc2UsCiAgICAgICAgImVtYWlsVmVyaWZpZWQiOiBmYWxzZSwKICAgICAgICAiZmlyc3ROYW1lIjogIkFsaWNlIiwKICAgICAgICAibGFzdE5hbWUiOiAiSW5DaGFpbnMiLAogICAgICAgICJlbWFpbCI6ICJhbGljZUBrZXljbG9hay5vcmciLAogICAgICAgICJjcmVkZW50aWFscyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAicGFzc3dvcmQiLAogICAgICAgICAgICAiaGFzaGVkU2FsdGVkVmFsdWUiOiAiWHg5SlB3ZmFmN2dHRzI0RkFRd1pySEE5VUhnTFpZMUErY2JuSXU0TUpSRlBubG5hcWpXRityaGtibTkzQXhxR0FLeXBxK3JuN093b1kwdHBLOFEvQ1E9PSIsCiAgICAgICAgICAgICJzYWx0IjogImhBVHJwMkxBMjR0S2UrZ2lWaW5XSHc9PSIsCiAgICAgICAgICAgICJoYXNoSXRlcmF0aW9ucyI6IDIwMDAwLAogICAgICAgICAgICAiY291bnRlciI6IDAsCiAgICAgICAgICAgICJhbGdvcml0aG0iOiAicGJrZGYyIiwKICAgICAgICAgICAgImRpZ2l0cyI6IDAsCiAgICAgICAgICAgICJjcmVhdGVkRGF0ZSI6IDE0ODkyODA3OTEwMDAKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZXF1aXJlZEFjdGlvbnMiOiBbXSwKICAgICAgICAicmVhbG1Sb2xlcyI6IFsKICAgICAgICAgICJleGFtcGxlLWFkbWluIiwKICAgICAgICAgICJvZmZsaW5lX2FjY2VzcyIKICAgICAgICBdLAogICAgICAgICJjbGllbnRSb2xlcyI6IHsKICAgICAgICAgICJzZWN1cmVkLWV4YW1wbGUtZW5kcG9pbnQiOiBbCiAgICAgICAgICAgICJleGFtcGxlLWFkbWluIgogICAgICAgICAgXSwKICAgICAgICAgICJhY2NvdW50IjogWwogICAgICAgICAgICAibWFuYWdlLWFjY291bnQiLAogICAgICAgICAgICAidmlldy1wcm9maWxlIgogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgImdyb3VwcyI6IFtdCiAgICAgIH0KICAgIF0sCiAgICAic2NvcGVNYXBwaW5ncyI6IFsKICAgICAgewogICAgICAgICJjbGllbnQiOiAiYWRtaW4tY2xpIiwKICAgICAgICAicm9sZXMiOiBbCiAgICAgICAgICAiYWRtaW4iCiAgICAgICAgXQogICAgICB9LAogICAgICB7CiAgICAgICAgImNsaWVudCI6ICJzZWN1cml0eS1hZG1pbi1jb25zb2xlIiwKICAgICAgICAicm9sZXMiOiBbCiAgICAgICAgICAiYWRtaW4iCiAgICAgICAgXQogICAgICB9CiAgICBdLAogICAgImNsaWVudHMiOiBbCiAgICAgIHsKICAgICAgICAiaWQiOiAiYjAyNjg4ZTAtYTA0MS00ZWVmLWExMTEtYTk4N2UzMDU1NjA3IiwKICAgICAgICAiY2xpZW50SWQiOiAiYWNjb3VudCIsCiAgICAgICAgIm5hbWUiOiAiJHtjbGllbnRfYWNjb3VudH0iLAogICAgICAgICJiYXNlVXJsIjogIi9hdXRoL3JlYWxtcy9kZW1vL2FjY291bnQiLAogICAgICAgICJzdXJyb2dhdGVBdXRoUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIjogImNsaWVudC1zZWNyZXQiLAogICAgICAgICJzZWNyZXQiOiAiMTg0MGUwZDQtMzEyMy00ZmU1LTg4ZGQtMjA2MDMwODI3OGM1IiwKICAgICAgICAiZGVmYXVsdFJvbGVzIjogWwogICAgICAgICAgInZpZXctcHJvZmlsZSIsCiAgICAgICAgICAibWFuYWdlLWFjY291bnQiCiAgICAgICAgXSwKICAgICAgICAicmVkaXJlY3RVcmlzIjogWwogICAgICAgICAgIi9hdXRoL3JlYWxtcy9kZW1vL2FjY291bnQvKiIKICAgICAgICBdLAogICAgICAgICJ3ZWJPcmlnaW5zIjogW10sCiAgICAgICAgIm5vdEJlZm9yZSI6IDAsCiAgICAgICAgImJlYXJlck9ubHkiOiBmYWxzZSwKICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgInN0YW5kYXJkRmxvd0VuYWJsZWQiOiB0cnVlLAogICAgICAgICJpbXBsaWNpdEZsb3dFbmFibGVkIjogZmFsc2UsCiAgICAgICAgImRpcmVjdEFjY2Vzc0dyYW50c0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAic2VydmljZUFjY291bnRzRW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJwdWJsaWNDbGllbnQiOiBmYWxzZSwKICAgICAgICAiZnJvbnRjaGFubmVsTG9nb3V0IjogZmFsc2UsCiAgICAgICAgImF0dHJpYnV0ZXMiOiB7fSwKICAgICAgICAiZnVsbFNjb3BlQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IjogMCwKICAgICAgICAicHJvdG9jb2xNYXBwZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZjk3MWQ0NGEtMTQ1Ny00ODczLWFmODQtMWQ0MzU1ZGI4ODkyIiwKICAgICAgICAgICAgIm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2VtYWlsfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImVtYWlsIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjk5YWFjYjA1LTAxNTgtNDIzNi05NmI4LTY5YzAxZDNiYjU5ZSIsCiAgICAgICAgICAgICJuYW1lIjogInJvbGUgbGlzdCIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJzYW1sIiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogInNhbWwtcm9sZS1saXN0LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAic2luZ2xlIjogImZhbHNlIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWVmb3JtYXQiOiAiQmFzaWMiLAogICAgICAgICAgICAgICJhdHRyaWJ1dGUubmFtZSI6ICJSb2xlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiNmU3M2QyYTctMzVmNC00Njg4LTkxYzItNWY4ODRhNzJkNzNjIiwKICAgICAgICAgICAgIm5hbWUiOiAiZmFtaWx5IG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2ZhbWlseU5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAibGFzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImZhbWlseV9uYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZDBhMWU4YjQtZGUxOC00YzQxLWE3ZTAtMzMxZGUwMTk5ZGM4IiwKICAgICAgICAgICAgIm5hbWUiOiAiZnVsbCBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtZnVsbC1uYW1lLW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmdWxsTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJhMzcwYTE5YS1mODZiLTQ0MmMtOGY2My01ZjJkZjA5ZGE4NTciLAogICAgICAgICAgICAibmFtZSI6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7dXNlcm5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAidXNlcm5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogInByZWZlcnJlZF91c2VybmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjgzM2M4YmYxLTc5NTEtNGUyOS05MzIyLTczMDg3N2ExOWVlMiIsCiAgICAgICAgICAgICJuYW1lIjogImdpdmVuIG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2dpdmVuTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJmaXJzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImdpdmVuX25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ1c2VUZW1wbGF0ZUNvbmZpZyI6IGZhbHNlLAogICAgICAgICJ1c2VUZW1wbGF0ZVNjb3BlIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlTWFwcGVycyI6IGZhbHNlCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiZjRmN2VmMGYtZmEyMi00NTg5LWIxYWQtM2ZlNDgyYzQ5NmI3IiwKICAgICAgICAiY2xpZW50SWQiOiAiYWRtaW4tY2xpIiwKICAgICAgICAibmFtZSI6ICIke2NsaWVudF9hZG1pbi1jbGl9IiwKICAgICAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgImVuYWJsZWQiOiB0cnVlLAogICAgICAgICJjbGllbnRBdXRoZW50aWNhdG9yVHlwZSI6ICJjbGllbnQtc2VjcmV0IiwKICAgICAgICAic2VjcmV0IjogImM3YzE1OThiLTBjNmQtNDhmYi05ODk3LTVmYjI4ZDQ2Y2Q5OSIsCiAgICAgICAgInJlZGlyZWN0VXJpcyI6IFtdLAogICAgICAgICJ3ZWJPcmlnaW5zIjogW10sCiAgICAgICAgIm5vdEJlZm9yZSI6IDAsCiAgICAgICAgImJlYXJlck9ubHkiOiBmYWxzZSwKICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgInN0YW5kYXJkRmxvd0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAiaW1wbGljaXRGbG93RW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIjogdHJ1ZSwKICAgICAgICAic2VydmljZUFjY291bnRzRW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJwdWJsaWNDbGllbnQiOiB0cnVlLAogICAgICAgICJmcm9udGNoYW5uZWxMb2dvdXQiOiBmYWxzZSwKICAgICAgICAiYXR0cmlidXRlcyI6IHt9LAogICAgICAgICJmdWxsU2NvcGVBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgIm5vZGVSZVJlZ2lzdHJhdGlvblRpbWVvdXQiOiAwLAogICAgICAgICJwcm90b2NvbE1hcHBlcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI3YTE0ZGMyOS01M2NmLTQ3NWMtOTA2My1mODViYjYyMGE3MmQiLAogICAgICAgICAgICAibmFtZSI6ICJmdWxsIG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy1mdWxsLW5hbWUtbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2Z1bGxOYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImY1ZWY0ODEyLThiZWItNDMzMy04ZTI4LTdlMzZiNjhlN2U0MCIsCiAgICAgICAgICAgICJuYW1lIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHt1c2VybmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAicHJlZmVycmVkX3VzZXJuYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZDY0OGQ1YjItM2QwYS00ODBkLWE1YmYtMjYyYmI2MWJkMWIxIiwKICAgICAgICAgICAgIm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2VtYWlsfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImVtYWlsIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjNkMjdjOGMxLWEzZDYtNDdhMS05NzkxLWIzOTZjZGViYWM0YiIsCiAgICAgICAgICAgICJuYW1lIjogImdpdmVuIG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2dpdmVuTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJmaXJzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImdpdmVuX25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIwZTNmMmQ2ZC04NzJlLTQ5MjItOGNmNy1hNzliZDhhNWRkMGUiLAogICAgICAgICAgICAibmFtZSI6ICJmYW1pbHkgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZmFtaWx5TmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJsYXN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZmFtaWx5X25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI5MGI5ZDcyOS00MGRiLTQ4N2MtYjJlYi0yYzljMjUxMWE4MGMiLAogICAgICAgICAgICAibmFtZSI6ICJyb2xlIGxpc3QiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAic2FtbCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJzYW1sLXJvbGUtbGlzdC1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInNpbmdsZSI6ICJmYWxzZSIsCiAgICAgICAgICAgICAgImF0dHJpYnV0ZS5uYW1lZm9ybWF0IjogIkJhc2ljIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWUiOiAiUm9sZSIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInVzZVRlbXBsYXRlQ29uZmlnIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlU2NvcGUiOiBmYWxzZSwKICAgICAgICAidXNlVGVtcGxhdGVNYXBwZXJzIjogZmFsc2UKICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICI0MjE3YzgzZi05MWI5LTQ3NjEtYjQwMi03YThlYTllNWNhNWEiLAogICAgICAgICJjbGllbnRJZCI6ICJicm9rZXIiLAogICAgICAgICJuYW1lIjogIiR7Y2xpZW50X2Jyb2tlcn0iLAogICAgICAgICJzdXJyb2dhdGVBdXRoUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIjogImNsaWVudC1zZWNyZXQiLAogICAgICAgICJzZWNyZXQiOiAiNDY5ZDViZDAtYjc5Yi00NGMxLTljMGYtZjE2NzMwZWYxMTBmIiwKICAgICAgICAicmVkaXJlY3RVcmlzIjogW10sCiAgICAgICAgIndlYk9yaWdpbnMiOiBbXSwKICAgICAgICAibm90QmVmb3JlIjogMCwKICAgICAgICAiYmVhcmVyT25seSI6IGZhbHNlLAogICAgICAgICJjb25zZW50UmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAic3RhbmRhcmRGbG93RW5hYmxlZCI6IHRydWUsCiAgICAgICAgImltcGxpY2l0Rmxvd0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAiZGlyZWN0QWNjZXNzR3JhbnRzRW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJzZXJ2aWNlQWNjb3VudHNFbmFibGVkIjogZmFsc2UsCiAgICAgICAgInB1YmxpY0NsaWVudCI6IGZhbHNlLAogICAgICAgICJmcm9udGNoYW5uZWxMb2dvdXQiOiBmYWxzZSwKICAgICAgICAiYXR0cmlidXRlcyI6IHt9LAogICAgICAgICJmdWxsU2NvcGVBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgIm5vZGVSZVJlZ2lzdHJhdGlvblRpbWVvdXQiOiAwLAogICAgICAgICJwcm90b2NvbE1hcHBlcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIxZjk3ZDA4Ni1hODg3LTQ3YzItOWJjNC01MGY1YzJiMTNjNTciLAogICAgICAgICAgICAibmFtZSI6ICJmYW1pbHkgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZmFtaWx5TmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJsYXN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZmFtaWx5X25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI0ZDExNjkwNi0xYTk3LTRhYmQtYTdkYy02YzQwMWVkYTJkMjYiLAogICAgICAgICAgICAibmFtZSI6ICJmdWxsIG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy1mdWxsLW5hbWUtbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2Z1bGxOYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjdkNjczMTQzLWE3YjktNDE0YS04MTAzLTAyMjg1ZGFlNjY3ZCIsCiAgICAgICAgICAgICJuYW1lIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHt1c2VybmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAicHJlZmVycmVkX3VzZXJuYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZjhhZTM2YTItNmEwNy00YzI5LWEyZjAtN2Q0NDc2ZmYzMjFjIiwKICAgICAgICAgICAgIm5hbWUiOiAicm9sZSBsaXN0IiwKICAgICAgICAgICAgInByb3RvY29sIjogInNhbWwiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJzaW5nbGUiOiAiZmFsc2UiLAogICAgICAgICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCI6ICJCYXNpYyIsCiAgICAgICAgICAgICAgImF0dHJpYnV0ZS5uYW1lIjogIlJvbGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI4NTEwMmY3Zi1iZjgwLTQyNjUtOWU4Mi0xZTRmNjMyNzA1YWEiLAogICAgICAgICAgICAibmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZW1haWx9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAiZW1haWwiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImVtYWlsIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMGE1N2I0ZWMtOTk2Yy00NzQ3LTkyOWQtZDdkMWJlN2QwMzQ0IiwKICAgICAgICAgICAgIm5hbWUiOiAiZ2l2ZW4gbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7Z2l2ZW5OYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImZpcnN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZ2l2ZW5fbmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInVzZVRlbXBsYXRlQ29uZmlnIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlU2NvcGUiOiBmYWxzZSwKICAgICAgICAidXNlVGVtcGxhdGVNYXBwZXJzIjogZmFsc2UKICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICJjYjBiZjM3Ni03MmNmLTRkOTgtOWQwNy0wNGM0ZjM4N2M3ZWEiLAogICAgICAgICJjbGllbnRJZCI6ICJkZW1vYXBwIiwKICAgICAgICAibmFtZSI6ICIiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgZGVmYXVsdCBjbGllbnQgYXBwbGljYXRpb24iLAogICAgICAgICJzdXJyb2dhdGVBdXRoUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIjogImNsaWVudC1zZWNyZXQiLAogICAgICAgICJzZWNyZXQiOiAiMWRhYTU3YTItYjYwZS00NjhiLWEzYWMtMjViZDJkYzJlYWRjIiwKICAgICAgICAicmVkaXJlY3RVcmlzIjogWwogICAgICAgICAgIioiCiAgICAgICAgXSwKICAgICAgICAid2ViT3JpZ2lucyI6IFsKICAgICAgICAgICIqIgogICAgICAgIF0sCiAgICAgICAgIm5vdEJlZm9yZSI6IDAsCiAgICAgICAgImJlYXJlck9ubHkiOiBmYWxzZSwKICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgInN0YW5kYXJkRmxvd0VuYWJsZWQiOiB0cnVlLAogICAgICAgICJpbXBsaWNpdEZsb3dFbmFibGVkIjogZmFsc2UsCiAgICAgICAgImRpcmVjdEFjY2Vzc0dyYW50c0VuYWJsZWQiOiB0cnVlLAogICAgICAgICJzZXJ2aWNlQWNjb3VudHNFbmFibGVkIjogZmFsc2UsCiAgICAgICAgInB1YmxpY0NsaWVudCI6IGZhbHNlLAogICAgICAgICJmcm9udGNoYW5uZWxMb2dvdXQiOiBmYWxzZSwKICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICAgInNhbWwuYXNzZXJ0aW9uLnNpZ25hdHVyZSI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbC5mb3JjZS5wb3N0LmJpbmRpbmciOiAiZmFsc2UiLAogICAgICAgICAgInNhbWwubXVsdGl2YWx1ZWQucm9sZXMiOiAiZmFsc2UiLAogICAgICAgICAgInNhbWwuZW5jcnlwdCI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbF9mb3JjZV9uYW1lX2lkX2Zvcm1hdCI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbC5jbGllbnQuc2lnbmF0dXJlIjogImZhbHNlIiwKICAgICAgICAgICJzYW1sLmF1dGhuc3RhdGVtZW50IjogImZhbHNlIiwKICAgICAgICAgICJzYW1sLnNlcnZlci5zaWduYXR1cmUiOiAiZmFsc2UiCiAgICAgICAgfSwKICAgICAgICAiZnVsbFNjb3BlQWxsb3dlZCI6IHRydWUsCiAgICAgICAgIm5vZGVSZVJlZ2lzdHJhdGlvblRpbWVvdXQiOiAtMSwKICAgICAgICAicHJvdG9jb2xNYXBwZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZTFlODhiNWEtNmE0NS00NGZhLThlNmUtYjVjOGFmNjZjNGIwIiwKICAgICAgICAgICAgIm5hbWUiOiAidXNlcm5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke3VzZXJuYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJwcmVmZXJyZWRfdXNlcm5hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIwMzJmMzk2ZS1kMGZjLTQwNWQtOTY0YS04OWVjNDljOTdlZGEiLAogICAgICAgICAgICAibmFtZSI6ICJnaXZlbiBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtnaXZlbk5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAiZmlyc3ROYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJnaXZlbl9uYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMTRmMGNjYTUtMjY0Yi00ZjlkLWFhYzctMzA4MWEwYmE0MDliIiwKICAgICAgICAgICAgIm5hbWUiOiAiZnVsbCBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtZnVsbC1uYW1lLW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmdWxsTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJhMDBjOTM0Yy01YjAxLTQzMTUtODgwMS0wMGQ4ODM1NWEzM2MiLAogICAgICAgICAgICAibmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZW1haWx9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAiZW1haWwiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImVtYWlsIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZTYxNjhlNzItZTA5Yi00MDM2LTg0NWMtMDI1MDIxNDljYmI0IiwKICAgICAgICAgICAgIm5hbWUiOiAicm9sZSBsaXN0IiwKICAgICAgICAgICAgInByb3RvY29sIjogInNhbWwiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJzaW5nbGUiOiAiZmFsc2UiLAogICAgICAgICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCI6ICJCYXNpYyIsCiAgICAgICAgICAgICAgImF0dHJpYnV0ZS5uYW1lIjogIlJvbGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIyNzFlZDViOC1lZWM5LTQwYTAtODkxMy0xOWQwZGM4ZTI5MGUiLAogICAgICAgICAgICAibmFtZSI6ICJmYW1pbHkgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZmFtaWx5TmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJsYXN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZmFtaWx5X25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ1c2VUZW1wbGF0ZUNvbmZpZyI6IGZhbHNlLAogICAgICAgICJ1c2VUZW1wbGF0ZVNjb3BlIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlTWFwcGVycyI6IGZhbHNlCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiMTVhOGNiNTktNzQ4MC00N2ZhLWIwYzMtNGJkZGU1NDhlODMyIiwKICAgICAgICAiY2xpZW50SWQiOiAiZGVtby1yZWFsbSIsCiAgICAgICAgIm5hbWUiOiAiZGVtbyBSZWFsbSIsCiAgICAgICAgInN1cnJvZ2F0ZUF1dGhSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAiY2xpZW50QXV0aGVudGljYXRvclR5cGUiOiAiY2xpZW50LXNlY3JldCIsCiAgICAgICAgInNlY3JldCI6ICI0NzNhNzkzNi05NTA3LTQ2NjktODNhNi04OWQ0MDk0ZjJjNGIiLAogICAgICAgICJyZWRpcmVjdFVyaXMiOiBbXSwKICAgICAgICAid2ViT3JpZ2lucyI6IFtdLAogICAgICAgICJub3RCZWZvcmUiOiAwLAogICAgICAgICJiZWFyZXJPbmx5IjogdHJ1ZSwKICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgInN0YW5kYXJkRmxvd0VuYWJsZWQiOiB0cnVlLAogICAgICAgICJpbXBsaWNpdEZsb3dFbmFibGVkIjogZmFsc2UsCiAgICAgICAgImRpcmVjdEFjY2Vzc0dyYW50c0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAic2VydmljZUFjY291bnRzRW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJwdWJsaWNDbGllbnQiOiBmYWxzZSwKICAgICAgICAiZnJvbnRjaGFubmVsTG9nb3V0IjogZmFsc2UsCiAgICAgICAgImF0dHJpYnV0ZXMiOiB7fSwKICAgICAgICAiZnVsbFNjb3BlQWxsb3dlZCI6IHRydWUsCiAgICAgICAgIm5vZGVSZVJlZ2lzdHJhdGlvblRpbWVvdXQiOiAwLAogICAgICAgICJwcm90b2NvbE1hcHBlcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJhMWJkODZhYy01ZTM3LTQyYzAtOGE0Ni1mOWZiYzE4ZDY2YWQiLAogICAgICAgICAgICAibmFtZSI6ICJnaXZlbiBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtnaXZlbk5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAiZmlyc3ROYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJnaXZlbl9uYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMThhOTQ4YTctZDQ3ZS00Mjg1LWE4YmUtNGIxZGU0NTNkZDA4IiwKICAgICAgICAgICAgIm5hbWUiOiAiZnVsbCBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtZnVsbC1uYW1lLW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmdWxsTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI5OWIwNzI2YS0wOWMxLTQ0NDgtOGYxMC01MDhhZmFmZjZiNWMiLAogICAgICAgICAgICAibmFtZSI6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7dXNlcm5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAidXNlcm5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogInByZWZlcnJlZF91c2VybmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImU4ODkyMThlLTMxMzgtNDMwOC1hZGVlLTkxOTNkM2FlZmJmNCIsCiAgICAgICAgICAgICJuYW1lIjogImZhbWlseSBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmYW1pbHlOYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImxhc3ROYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJmYW1pbHlfbmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjdkODI4NDg2LWZjNzktNGI5NS1iNmExLTkwYTJkNjA5ZGI3MCIsCiAgICAgICAgICAgICJuYW1lIjogImVtYWlsIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtlbWFpbH0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJiZTVkNjU3Ny0wNWQ5LTQ4NzItOTE4Yi05YWNhODI5ZGJiN2IiLAogICAgICAgICAgICAibmFtZSI6ICJyb2xlIGxpc3QiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAic2FtbCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJzYW1sLXJvbGUtbGlzdC1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInNpbmdsZSI6ICJmYWxzZSIsCiAgICAgICAgICAgICAgImF0dHJpYnV0ZS5uYW1lZm9ybWF0IjogIkJhc2ljIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWUiOiAiUm9sZSIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInVzZVRlbXBsYXRlQ29uZmlnIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlU2NvcGUiOiBmYWxzZSwKICAgICAgICAidXNlVGVtcGxhdGVNYXBwZXJzIjogZmFsc2UKICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICJmNmNiYTA4Yy1kYTY0LTQ2MjItYjRhMi0wMWE3NGQwNDZlOWQiLAogICAgICAgICJjbGllbnRJZCI6ICJzZWN1cmVkLWV4YW1wbGUtZW5kcG9pbnQiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIHNlY3VyZWQgZXhhbXBsZSBSRVNUIGVuZHBvaW50IHJlcXVpcmluZyBleGFtcGxlLWFkbWluIHJvbGUgZm9yIGFjY2VzcyIsCiAgICAgICAgInN1cnJvZ2F0ZUF1dGhSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAiY2xpZW50QXV0aGVudGljYXRvclR5cGUiOiAiY2xpZW50LXNlY3JldCIsCiAgICAgICAgInJlZGlyZWN0VXJpcyI6IFsKICAgICAgICAgICIqIgogICAgICAgIF0sCiAgICAgICAgIndlYk9yaWdpbnMiOiBbCiAgICAgICAgICAiKiIKICAgICAgICBdLAogICAgICAgICJub3RCZWZvcmUiOiAwLAogICAgICAgICJiZWFyZXJPbmx5IjogdHJ1ZSwKICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgInN0YW5kYXJkRmxvd0VuYWJsZWQiOiB0cnVlLAogICAgICAgICJpbXBsaWNpdEZsb3dFbmFibGVkIjogZmFsc2UsCiAgICAgICAgImRpcmVjdEFjY2Vzc0dyYW50c0VuYWJsZWQiOiB0cnVlLAogICAgICAgICJzZXJ2aWNlQWNjb3VudHNFbmFibGVkIjogZmFsc2UsCiAgICAgICAgInB1YmxpY0NsaWVudCI6IGZhbHNlLAogICAgICAgICJmcm9udGNoYW5uZWxMb2dvdXQiOiBmYWxzZSwKICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICAgInNhbWwuYXNzZXJ0aW9uLnNpZ25hdHVyZSI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbC5mb3JjZS5wb3N0LmJpbmRpbmciOiAiZmFsc2UiLAogICAgICAgICAgInNhbWwubXVsdGl2YWx1ZWQucm9sZXMiOiAiZmFsc2UiLAogICAgICAgICAgInNhbWwuZW5jcnlwdCI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbF9mb3JjZV9uYW1lX2lkX2Zvcm1hdCI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbC5jbGllbnQuc2lnbmF0dXJlIjogImZhbHNlIiwKICAgICAgICAgICJzYW1sLmF1dGhuc3RhdGVtZW50IjogImZhbHNlIiwKICAgICAgICAgICJzYW1sLnNlcnZlci5zaWduYXR1cmUiOiAiZmFsc2UiLAogICAgICAgICAgInNhbWwuc2VydmVyLnNpZ25hdHVyZS5rZXlpbmZvLmV4dCI6ICJmYWxzZSIKICAgICAgICB9LAogICAgICAgICJmdWxsU2NvcGVBbGxvd2VkIjogdHJ1ZSwKICAgICAgICAibm9kZVJlUmVnaXN0cmF0aW9uVGltZW91dCI6IC0xLAogICAgICAgICJwcm90b2NvbE1hcHBlcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI2ODRiODc0OS00OGJmLTQyMDYtYTVjNi05MDViZGM1NDJkZWQiLAogICAgICAgICAgICAibmFtZSI6ICJmdWxsIG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy1mdWxsLW5hbWUtbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2Z1bGxOYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIjogInRydWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIyNzM3Y2ExOC0zNGZkLTQ0MTEtYmNiZS04NmRkNzgzM2FmZTQiLAogICAgICAgICAgICAibmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZW1haWx9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImVtYWlsIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImNjOGNlNjQxLTViYTEtNGE2MS05YzZjLWQ0ZmM3OGM5ZjU5NyIsCiAgICAgICAgICAgICJuYW1lIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHt1c2VybmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAidXNlcm5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogInByZWZlcnJlZF91c2VybmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjU4NzA2MTdkLTk2YzktNGE4Ny1hYzBhLWE1Y2FiYWMxODNhNCIsCiAgICAgICAgICAgICJuYW1lIjogImZhbWlseSBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmYW1pbHlOYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJsYXN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZmFtaWx5X25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI5YzA3YWY2NC1lMWQxLTRiODUtODhmZC1kZmEwMmUwZjgwMmIiLAogICAgICAgICAgICAibmFtZSI6ICJnaXZlbiBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtnaXZlbk5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImZpcnN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZ2l2ZW5fbmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImQ1N2U3Mzg2LTZhNTAtNGJmMi1iYmIzLTM2NzhkYjNmM2I1ZiIsCiAgICAgICAgICAgICJuYW1lIjogInJvbGUgbGlzdCIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJzYW1sIiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogInNhbWwtcm9sZS1saXN0LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAic2luZ2xlIjogImZhbHNlIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWVmb3JtYXQiOiAiQmFzaWMiLAogICAgICAgICAgICAgICJhdHRyaWJ1dGUubmFtZSI6ICJSb2xlIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidXNlVGVtcGxhdGVDb25maWciOiBmYWxzZSwKICAgICAgICAidXNlVGVtcGxhdGVTY29wZSI6IGZhbHNlLAogICAgICAgICJ1c2VUZW1wbGF0ZU1hcHBlcnMiOiBmYWxzZQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogIjFlNDYyYmY1LWQxOTQtNDAwZi04Njc3LTY0MjhiM2M0NzRlZSIsCiAgICAgICAgImNsaWVudElkIjogInNlY3VyaXR5LWFkbWluLWNvbnNvbGUiLAogICAgICAgICJuYW1lIjogIiR7Y2xpZW50X3NlY3VyaXR5LWFkbWluLWNvbnNvbGV9IiwKICAgICAgICAiYmFzZVVybCI6ICIvYXV0aC9hZG1pbi9kZW1vL2NvbnNvbGUvaW5kZXguaHRtbCIsCiAgICAgICAgInN1cnJvZ2F0ZUF1dGhSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAiY2xpZW50QXV0aGVudGljYXRvclR5cGUiOiAiY2xpZW50LXNlY3JldCIsCiAgICAgICAgInNlY3JldCI6ICIwZmE0OTJjNS0yNjJlLTRlMTUtYWI2Yy05NDMxMDlkYzljMzQiLAogICAgICAgICJyZWRpcmVjdFVyaXMiOiBbCiAgICAgICAgICAiL2F1dGgvYWRtaW4vZGVtby9jb25zb2xlLyoiCiAgICAgICAgXSwKICAgICAgICAid2ViT3JpZ2lucyI6IFtdLAogICAgICAgICJub3RCZWZvcmUiOiAwLAogICAgICAgICJiZWFyZXJPbmx5IjogZmFsc2UsCiAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIjogdHJ1ZSwKICAgICAgICAiaW1wbGljaXRGbG93RW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIjogZmFsc2UsCiAgICAgICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAicHVibGljQ2xpZW50IjogdHJ1ZSwKICAgICAgICAiZnJvbnRjaGFubmVsTG9nb3V0IjogZmFsc2UsCiAgICAgICAgImF0dHJpYnV0ZXMiOiB7fSwKICAgICAgICAiZnVsbFNjb3BlQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IjogMCwKICAgICAgICAicHJvdG9jb2xNYXBwZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMjdkNzc3Y2ItOGEwMi00MDgxLWEzY2MtMDRhMjA5ZTFhMmFjIiwKICAgICAgICAgICAgIm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2VtYWlsfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImVtYWlsIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjhiN2MyZDFkLTY4Y2EtNGM0YS04ZGFlLWJmMTc5ZTRjM2IxOCIsCiAgICAgICAgICAgICJuYW1lIjogImZhbWlseSBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmYW1pbHlOYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImxhc3ROYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJmYW1pbHlfbmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjA4ZDgwMmI3LWQ0YWItNDllMi04YjgxLWRiZjk0YWJlMWNkNiIsCiAgICAgICAgICAgICJuYW1lIjogImZ1bGwgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZnVsbE5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiN2VmNDNmN2MtNjc4NS00MGE1LTg2OTktOTg2NDZhNjVkZTRmIiwKICAgICAgICAgICAgIm5hbWUiOiAiZ2l2ZW4gbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7Z2l2ZW5OYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImZpcnN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZ2l2ZW5fbmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjE0NzY5YmE2LWVmZmQtNDg0Yi1hYWU2LTZlY2FjYWNiNDI1MyIsCiAgICAgICAgICAgICJuYW1lIjogInJvbGUgbGlzdCIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJzYW1sIiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogInNhbWwtcm9sZS1saXN0LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAic2luZ2xlIjogImZhbHNlIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWVmb3JtYXQiOiAiQmFzaWMiLAogICAgICAgICAgICAgICJhdHRyaWJ1dGUubmFtZSI6ICJSb2xlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiNTlhMTlmMDUtNzg5Zi00M2QwLTlhNjktMGE0YzAwZTA2YTRkIiwKICAgICAgICAgICAgIm5hbWUiOiAidXNlcm5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke3VzZXJuYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJwcmVmZXJyZWRfdXNlcm5hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJhMzUzOTE3ZC0yMjA1LTQyMzAtOWM1Ni02NTNmMzUzNmU5MzkiLAogICAgICAgICAgICAibmFtZSI6ICJsb2NhbGUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtYXR0cmlidXRlLW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7bG9jYWxlfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImxvY2FsZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAibG9jYWxlIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidXNlVGVtcGxhdGVDb25maWciOiBmYWxzZSwKICAgICAgICAidXNlVGVtcGxhdGVTY29wZSI6IGZhbHNlLAogICAgICAgICJ1c2VUZW1wbGF0ZU1hcHBlcnMiOiBmYWxzZQogICAgICB9CiAgICBdLAogICAgImNsaWVudFRlbXBsYXRlcyI6IFtdLAogICAgImJyb3dzZXJTZWN1cml0eUhlYWRlcnMiOiB7CiAgICAgICJ4Q29udGVudFR5cGVPcHRpb25zIjogIm5vc25pZmYiLAogICAgICAieEZyYW1lT3B0aW9ucyI6ICJTQU1FT1JJR0lOIiwKICAgICAgImNvbnRlbnRTZWN1cml0eVBvbGljeSI6ICJmcmFtZS1zcmMgJ3NlbGYnIgogICAgfSwKICAgICJzbXRwU2VydmVyIjoge30sCiAgICAiZXZlbnRzRW5hYmxlZCI6IGZhbHNlLAogICAgImV2ZW50c0xpc3RlbmVycyI6IFsKICAgICAgImpib3NzLWxvZ2dpbmciCiAgICBdLAogICAgImVuYWJsZWRFdmVudFR5cGVzIjogW10sCiAgICAiYWRtaW5FdmVudHNFbmFibGVkIjogZmFsc2UsCiAgICAiYWRtaW5FdmVudHNEZXRhaWxzRW5hYmxlZCI6IGZhbHNlLAogICAgImludGVybmF0aW9uYWxpemF0aW9uRW5hYmxlZCI6IGZhbHNlLAogICAgInN1cHBvcnRlZExvY2FsZXMiOiBbXSwKICAgICJhdXRoZW50aWNhdGlvbkZsb3dzIjogWwogICAgICB7CiAgICAgICAgImlkIjogImU5NDhhM2JjLTY2NmQtNGNhMS04M2RiLTliYjdjZDI0NmRmNSIsCiAgICAgICAgImFsaWFzIjogIkhhbmRsZSBFeGlzdGluZyBBY2NvdW50IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSGFuZGxlIHdoYXQgdG8gZG8gaWYgdGhlcmUgaXMgZXhpc3RpbmcgYWNjb3VudCB3aXRoIHNhbWUgZW1haWwvdXNlcm5hbWUgbGlrZSBhdXRoZW50aWNhdGVkIGlkZW50aXR5IHByb3ZpZGVyIiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJiYXNpYy1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiBmYWxzZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiaWRwLWNvbmZpcm0tbGluayIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJSRVFVSVJFRCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDEwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJpZHAtZW1haWwtdmVyaWZpY2F0aW9uIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIkFMVEVSTkFUSVZFIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMjAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJBTFRFUk5BVElWRSIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDMwLAogICAgICAgICAgICAiZmxvd0FsaWFzIjogIlZlcmlmeSBFeGlzdGluZyBBY2NvdW50IGJ5IFJlLWF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiB0cnVlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogIjk2YjJjZmVjLTYyZTEtNDNlZC05N2E1LWVmMzJkYjRkNDk2OSIsCiAgICAgICAgImFsaWFzIjogIlZlcmlmeSBFeGlzdGluZyBBY2NvdW50IGJ5IFJlLWF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiUmVhdXRoZW50aWNhdGlvbiBvZiBleGlzdGluZyBhY2NvdW50IiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJiYXNpYy1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiBmYWxzZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiaWRwLXVzZXJuYW1lLXBhc3N3b3JkLWZvcm0iLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiUkVRVUlSRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAxMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiYXV0aC1vdHAtZm9ybSIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJPUFRJT05BTCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDIwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogImE5YmI1NWZiLTdhZWMtNGM0OS04MWM4LTViMzk3NGU5ZDk4ZiIsCiAgICAgICAgImFsaWFzIjogImJyb3dzZXIiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJicm93c2VyIGJhc2VkIGF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJiYXNpYy1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiB0cnVlLAogICAgICAgICJidWlsdEluIjogdHJ1ZSwKICAgICAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJhdXRoLWNvb2tpZSIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJBTFRFUk5BVElWRSIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDEwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJhdXRoLXNwbmVnbyIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJESVNBQkxFRCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDIwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiQUxURVJOQVRJVkUiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAzMCwKICAgICAgICAgICAgImZsb3dBbGlhcyI6ICJmb3JtcyIsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogdHJ1ZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICI1ZTRkMWUxZS1jNzEzLTRiMGYtODhmMS00YjUyMmFjYTcyMzAiLAogICAgICAgICJhbGlhcyI6ICJjbGllbnRzIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQmFzZSBhdXRoZW50aWNhdGlvbiBmb3IgY2xpZW50cyIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiY2xpZW50LWZsb3ciLAogICAgICAgICJ0b3BMZXZlbCI6IHRydWUsCiAgICAgICAgImJ1aWx0SW4iOiB0cnVlLAogICAgICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogImNsaWVudC1zZWNyZXQiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiQUxURVJOQVRJVkUiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAxMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiY2xpZW50LWp3dCIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJBTFRFUk5BVElWRSIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDIwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogImI4M2E1OTRjLWVlMWQtNGE2YS1iMTIwLWVkOThhZGJjYTFmYyIsCiAgICAgICAgImFsaWFzIjogImRpcmVjdCBncmFudCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk9wZW5JRCBDb25uZWN0IFJlc291cmNlIE93bmVyIEdyYW50IiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJiYXNpYy1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiB0cnVlLAogICAgICAgICJidWlsdEluIjogdHJ1ZSwKICAgICAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJkaXJlY3QtZ3JhbnQtdmFsaWRhdGUtdXNlcm5hbWUiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiUkVRVUlSRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAxMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiZGlyZWN0LWdyYW50LXZhbGlkYXRlLXBhc3N3b3JkIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMjAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogImRpcmVjdC1ncmFudC12YWxpZGF0ZS1vdHAiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiT1BUSU9OQUwiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAzMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICIzYmM5ZjMxNy1mZDYyLTRmYmEtOWRjMy0yYTRmM2M3ZmVmMDgiLAogICAgICAgICJhbGlhcyI6ICJmaXJzdCBicm9rZXIgbG9naW4iLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJBY3Rpb25zIHRha2VuIGFmdGVyIGZpcnN0IGJyb2tlciBsb2dpbiB3aXRoIGlkZW50aXR5IHByb3ZpZGVyIGFjY291bnQsIHdoaWNoIGlzIG5vdCB5ZXQgbGlua2VkIHRvIGFueSBLZXljbG9hayBhY2NvdW50IiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJiYXNpYy1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiB0cnVlLAogICAgICAgICJidWlsdEluIjogdHJ1ZSwKICAgICAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvckNvbmZpZyI6ICJyZXZpZXcgcHJvZmlsZSBjb25maWciLAogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJpZHAtcmV2aWV3LXByb2ZpbGUiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiUkVRVUlSRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAxMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3JDb25maWciOiAiY3JlYXRlIHVuaXF1ZSB1c2VyIGNvbmZpZyIsCiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogImlkcC1jcmVhdGUtdXNlci1pZi11bmlxdWUiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiQUxURVJOQVRJVkUiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAyMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIkFMVEVSTkFUSVZFIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMzAsCiAgICAgICAgICAgICJmbG93QWxpYXMiOiAiSGFuZGxlIEV4aXN0aW5nIEFjY291bnQiLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiZmFmNDAxMDYtYzc1Ny00YjZiLTlkNmUtNDUxMDU4MzU4YzY4IiwKICAgICAgICAiYWxpYXMiOiAiZm9ybXMiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJVc2VybmFtZSwgcGFzc3dvcmQsIG90cCBhbmQgb3RoZXIgYXV0aCBmb3Jtcy4iLAogICAgICAgICJwcm92aWRlcklkIjogImJhc2ljLWZsb3ciLAogICAgICAgICJ0b3BMZXZlbCI6IGZhbHNlLAogICAgICAgICJidWlsdEluIjogdHJ1ZSwKICAgICAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJhdXRoLXVzZXJuYW1lLXBhc3N3b3JkLWZvcm0iLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiUkVRVUlSRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAxMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiYXV0aC1vdHAtZm9ybSIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJPUFRJT05BTCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDIwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogIjkwZjVjZTE5LTk5NmUtNDQ1NC05ZjBhLWYwMjEzYWZhZmE3NSIsCiAgICAgICAgImFsaWFzIjogInJlZ2lzdHJhdGlvbiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogInJlZ2lzdHJhdGlvbiBmbG93IiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJiYXNpYy1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiB0cnVlLAogICAgICAgICJidWlsdEluIjogdHJ1ZSwKICAgICAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJyZWdpc3RyYXRpb24tcGFnZS1mb3JtIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMTAsCiAgICAgICAgICAgICJmbG93QWxpYXMiOiAicmVnaXN0cmF0aW9uIGZvcm0iLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiYjg0ODgxM2ItZTg3My00YmJiLTg5NzYtNzJiOWIwMDc4OTU2IiwKICAgICAgICAiYWxpYXMiOiAicmVnaXN0cmF0aW9uIGZvcm0iLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJyZWdpc3RyYXRpb24gZm9ybSIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiZm9ybS1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiBmYWxzZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAicmVnaXN0cmF0aW9uLXVzZXItY3JlYXRpb24iLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiUkVRVUlSRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAyMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAicmVnaXN0cmF0aW9uLXByb2ZpbGUtYWN0aW9uIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogNDAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogInJlZ2lzdHJhdGlvbi1wYXNzd29yZC1hY3Rpb24iLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiUkVRVUlSRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiA1MCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAicmVnaXN0cmF0aW9uLXJlY2FwdGNoYS1hY3Rpb24iLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiRElTQUJMRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiA2MCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICIyMzEzNTUzZC00MjE2LTQzNWEtOTEwMy1hODlkMjg4YjU4MzEiLAogICAgICAgICJhbGlhcyI6ICJyZXNldCBjcmVkZW50aWFscyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlJlc2V0IGNyZWRlbnRpYWxzIGZvciBhIHVzZXIgaWYgdGhleSBmb3Jnb3QgdGhlaXIgcGFzc3dvcmQgb3Igc29tZXRoaW5nIiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJiYXNpYy1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiB0cnVlLAogICAgICAgICJidWlsdEluIjogdHJ1ZSwKICAgICAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJyZXNldC1jcmVkZW50aWFscy1jaG9vc2UtdXNlciIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJSRVFVSVJFRCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDEwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJyZXNldC1jcmVkZW50aWFsLWVtYWlsIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMjAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogInJlc2V0LXBhc3N3b3JkIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMzAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogInJlc2V0LW90cCIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJPUFRJT05BTCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDQwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogIjQyYjRjYzMzLWI0YjItNDA0OS1hZjMzLWJlOWU3ZTU4Njk4MyIsCiAgICAgICAgImFsaWFzIjogInNhbWwgZWNwIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiU0FNTCBFQ1AgUHJvZmlsZSBBdXRoZW50aWNhdGlvbiBGbG93IiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJiYXNpYy1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiB0cnVlLAogICAgICAgICJidWlsdEluIjogdHJ1ZSwKICAgICAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJodHRwLWJhc2ljLWF1dGhlbnRpY2F0b3IiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiUkVRVUlSRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAxMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgXSwKICAgICJhdXRoZW50aWNhdG9yQ29uZmlnIjogWwogICAgICB7CiAgICAgICAgImlkIjogImQyYThiZTNjLWExMjctNDQ2Mi1iODJkLTJjYTYxZGYxYjJhNCIsCiAgICAgICAgImFsaWFzIjogImNyZWF0ZSB1bmlxdWUgdXNlciBjb25maWciLAogICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAicmVxdWlyZS5wYXNzd29yZC51cGRhdGUuYWZ0ZXIucmVnaXN0cmF0aW9uIjogImZhbHNlIgogICAgICAgIH0KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICIyYWZiNjYyOC0xYjQyLTRkNGYtODBhNy1jZmIwNDcxYmE2NjEiLAogICAgICAgICJhbGlhcyI6ICJyZXZpZXcgcHJvZmlsZSBjb25maWciLAogICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAidXBkYXRlLnByb2ZpbGUub24uZmlyc3QubG9naW4iOiAibWlzc2luZyIKICAgICAgICB9CiAgICAgIH0KICAgIF0sCiAgICAicmVxdWlyZWRBY3Rpb25zIjogWwogICAgICB7CiAgICAgICAgImFsaWFzIjogIkNPTkZJR1VSRV9UT1RQIiwKICAgICAgICAibmFtZSI6ICJDb25maWd1cmUgVG90cCIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiQ09ORklHVVJFX1RPVFAiLAogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAiZGVmYXVsdEFjdGlvbiI6IGZhbHNlLAogICAgICAgICJjb25maWciOiB7fQogICAgICB9LAogICAgICB7CiAgICAgICAgImFsaWFzIjogIlVQREFURV9QQVNTV09SRCIsCiAgICAgICAgIm5hbWUiOiAiVXBkYXRlIFBhc3N3b3JkIiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJVUERBVEVfUEFTU1dPUkQiLAogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAiZGVmYXVsdEFjdGlvbiI6IGZhbHNlLAogICAgICAgICJjb25maWciOiB7fQogICAgICB9LAogICAgICB7CiAgICAgICAgImFsaWFzIjogIlVQREFURV9QUk9GSUxFIiwKICAgICAgICAibmFtZSI6ICJVcGRhdGUgUHJvZmlsZSIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiVVBEQVRFX1BST0ZJTEUiLAogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAiZGVmYXVsdEFjdGlvbiI6IGZhbHNlLAogICAgICAgICJjb25maWciOiB7fQogICAgICB9LAogICAgICB7CiAgICAgICAgImFsaWFzIjogIlZFUklGWV9FTUFJTCIsCiAgICAgICAgIm5hbWUiOiAiVmVyaWZ5IEVtYWlsIiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJWRVJJRllfRU1BSUwiLAogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAiZGVmYXVsdEFjdGlvbiI6IGZhbHNlLAogICAgICAgICJjb25maWciOiB7fQogICAgICB9LAogICAgICB7CiAgICAgICAgImFsaWFzIjogInRlcm1zX2FuZF9jb25kaXRpb25zIiwKICAgICAgICAibmFtZSI6ICJUZXJtcyBhbmQgQ29uZGl0aW9ucyIsCiAgICAgICAgInByb3ZpZGVySWQiOiAidGVybXNfYW5kX2NvbmRpdGlvbnMiLAogICAgICAgICJlbmFibGVkIjogZmFsc2UsCiAgICAgICAgImRlZmF1bHRBY3Rpb24iOiBmYWxzZSwKICAgICAgICAiY29uZmlnIjoge30KICAgICAgfQogICAgXSwKICAgICJicm93c2VyRmxvdyI6ICJicm93c2VyIiwKICAgICJyZWdpc3RyYXRpb25GbG93IjogInJlZ2lzdHJhdGlvbiIsCiAgICAiZGlyZWN0R3JhbnRGbG93IjogImRpcmVjdCBncmFudCIsCiAgICAicmVzZXRDcmVkZW50aWFsc0Zsb3ciOiAicmVzZXQgY3JlZGVudGlhbHMiLAogICAgImNsaWVudEF1dGhlbnRpY2F0aW9uRmxvdyI6ICJjbGllbnRzIiwKICAgICJrZXljbG9ha1ZlcnNpb24iOiAiNy4wLjAuR0EiCiAgfQpdCg==
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: sso-service-account
  secrets:
  - name: sso-app-secret
- apiVersion: v1
  kind: Service
  metadata:
    name: secure-sso
    labels:
      app: sso
  spec:
    ports:
    - port: 8443
      targetPort: 8443
    selector:
      app: sso
- apiVersion: v1
  kind: Service
  metadata:
    name: sso
    labels:
      app: sso
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      app: sso
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: sso
    labels:
      app: sso
  spec:
    strategy:
      type: Rolling
      rollingParams:
        timeoutSeconds: 10800
    replicas: 1
    selector:
      app: sso
    template:
      metadata:
        name: sso
        labels:
          app: sso
      spec:
        serviceAccountName: sso-service-account
        terminationGracePeriodSeconds: 30
        containers:
        - name: sso
          image: registry.access.redhat.com/redhat-sso-7/sso73-openshift
          imagePullPolicy: Always
          volumeMounts:
          - name: sso-demo-volume
            mountPath: "/opt/sso-demo"
            readOnly: true
          - name: eap-keystore-volume
            mountPath: "/etc/eap-secret-volume"
            readOnly: true
          - name: eap-jgroups-keystore-volume
            mountPath: "/etc/jgroups-encrypt-secret-volume"
            readOnly: true
          - name: sso-truststore-volume
            mountPath: "/etc/sso-secret-volume"
            readOnly: true
          livenessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/livenessProbe.sh"
            initialDelaySeconds: 180
          readinessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/readinessProbe.sh"
          ports:
          - name: jolokia
            containerPort: 8778
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: https
            containerPort: 8443
            protocol: TCP
          env:
          - name: HOSTNAME_HTTP
          - name: HOSTNAME_HTTPS
          - name: SSO_IMPORT_FILE
            value: "/opt/sso-demo/sso-demo.json"
          - name: HTTPS_KEYSTORE_DIR
            value: "/etc/eap-secret-volume"
          - name: HTTPS_KEYSTORE
            value: "keystore.jks"
          - name: HTTPS_KEYSTORE_TYPE
          - name: HTTPS_NAME
            value: "jboss"
          - name: HTTPS_PASSWORD
            value: "mykeystorepass"
          - name: JGROUPS_ENCRYPT_SECRET
            value: "sso-app-secret"
          - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
            value: "/etc/jgroups-encrypt-secret-volume"
          - name: JGROUPS_ENCRYPT_KEYSTORE
            value: "jgroups.jceks"
          - name: JGROUPS_ENCRYPT_NAME
          - name: JGROUPS_ENCRYPT_PASSWORD
          - name: JGROUPS_CLUSTER_PASSWORD
          - name: SSO_SERVICE_USERNAME
          - name: SSO_SERVICE_PASSWORD
          - name: SSO_TRUSTSTORE
          - name: SSO_TRUSTSTORE_DIR
            value: "/etc/sso-secret-volume"
          - name: SSO_TRUSTSTORE_PASSWORD
        volumes:
        - name: sso-demo-volume
          secret:
            secretName: sso-demo-secret
        - name: eap-keystore-volume
          secret:
            secretName: "sso-app-secret"
        - name: eap-jgroups-keystore-volume
          secret:
            secretName: "sso-app-secret"
        - name: sso-truststore-volume
          secret:
            secretName: "sso-app-secret"
    triggers:
    - type: ConfigChange
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: secure-sso
    labels:
      app: sso
  spec:
    to:
      kind: Service
      name: secure-sso
    tls:
      termination: passthrough
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: sso
    labels:
      app: sso
  spec:
    to:
      kind: Service
      name: sso
